generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RecordingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String?
  username         String    @unique
  name             String?
  role             String    @default("user")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  scripts          Script[]
  credentials      Credential[]
  recordings       Recording[]
  passwordResetOtp String?
  otpExpiry        DateTime?
  googleDriveAccessToken String?
  googleDriveRefreshToken String?
}

model Script {
  id               Int       @id @default(autoincrement())
  content          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  userId           Int
  user             User      @relation(fields: [userId], references: [id])
  recordings       Recording[]
}

model Credential {
  id        Int      @id @default(autoincrement())
  userId    Int
  websiteUrl String
  username  String
  password  String
  usernameSelector String
  passwordSelector String
  submitSelector String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, websiteUrl])
}

model Recording {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  scriptId  Int?
  script    Script?  @relation(fields: [scriptId], references: [id])
  googleDriveUrl String?
  status    RecordingStatus @default(PENDING)
}
